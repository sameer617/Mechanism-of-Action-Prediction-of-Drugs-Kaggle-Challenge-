{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2021-11-09T14:25:21.244587Z","iopub.execute_input":"2021-11-09T14:25:21.245356Z","iopub.status.idle":"2021-11-09T14:25:21.328030Z","shell.execute_reply.started":"2021-11-09T14:25:21.245281Z","shell.execute_reply":"2021-11-09T14:25:21.327027Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"#importing important libraries\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pickle\nfrom skmultilearn.model_selection import iterative_train_test_split\n#from iterstrat.ml_stratifiers import MultilabelStratifiedKFold\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import log_loss,f1_score,confusion_matrix\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nimport xgboost as xgb\nfrom sklearn.metrics import accuracy_score\nfrom tensorflow.keras.models import load_model\n\nfrom sklearn.preprocessing import LabelEncoder\nimport tensorflow_addons as tfa\nimport pickle\nfrom tensorflow.keras import backend","metadata":{"execution":{"iopub.status.busy":"2021-11-09T14:25:21.334960Z","iopub.execute_input":"2021-11-09T14:25:21.335289Z","iopub.status.idle":"2021-11-09T14:25:23.889651Z","shell.execute_reply.started":"2021-11-09T14:25:21.335252Z","shell.execute_reply":"2021-11-09T14:25:23.888511Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"execution":{"iopub.status.busy":"2021-11-09T14:25:23.891050Z","iopub.execute_input":"2021-11-09T14:25:23.891314Z","iopub.status.idle":"2021-11-09T14:25:23.894655Z","shell.execute_reply.started":"2021-11-09T14:25:23.891285Z","shell.execute_reply":"2021-11-09T14:25:23.894087Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"#reading train dataset\n\ntrain_features=pd.read_csv('../input/lish-moa/train_features.csv')\ntest_features=pd.read_csv('../input/lish-moa/test_features.csv')\ntrain_targets_scored=pd.read_csv('../input/lish-moa/train_targets_scored.csv')\ntrain_targets_nonscored=pd.read_csv('../input/lish-moa/train_targets_nonscored.csv')\ntrain_drug=pd.read_csv('../input/lish-moa/train_drug.csv')","metadata":{"execution":{"iopub.status.busy":"2021-11-09T14:25:23.896415Z","iopub.execute_input":"2021-11-09T14:25:23.896636Z","iopub.status.idle":"2021-11-09T14:25:29.788955Z","shell.execute_reply.started":"2021-11-09T14:25:23.896610Z","shell.execute_reply":"2021-11-09T14:25:29.788158Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"import random\ndef seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\nseed_everything(seed=42)\n","metadata":{"execution":{"iopub.status.busy":"2021-11-09T14:25:29.790088Z","iopub.execute_input":"2021-11-09T14:25:29.790724Z","iopub.status.idle":"2021-11-09T14:25:29.796250Z","shell.execute_reply.started":"2021-11-09T14:25:29.790686Z","shell.execute_reply":"2021-11-09T14:25:29.795440Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"#list of names of the MoAs in the dataset\ntarget_cols_scored=[col for col in train_targets_scored.columns if col not in ['sig_id']]\ntarget_cols_nonscored=[col for col in train_targets_nonscored.columns if col not in ['sig_id']]","metadata":{"execution":{"iopub.status.busy":"2021-11-09T14:25:29.797802Z","iopub.execute_input":"2021-11-09T14:25:29.798540Z","iopub.status.idle":"2021-11-09T14:25:29.809457Z","shell.execute_reply.started":"2021-11-09T14:25:29.798504Z","shell.execute_reply":"2021-11-09T14:25:29.808673Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"#separating gene feautres and cell features in a separate list\n#we know that all the gene expression features name starts with 'g-' and cell features name starts with 'c-', hence trying to observe set of all the gene expression as one function and all the cell functions as one features\ngene_features=[]\ncell_features=[]\nfor i in train_features.columns:\n    if i.startswith('g-'):\n        gene_features.append(i)\n    if i.startswith('c-'):\n        cell_features.append(i)","metadata":{"execution":{"iopub.status.busy":"2021-11-09T14:25:29.810891Z","iopub.execute_input":"2021-11-09T14:25:29.811183Z","iopub.status.idle":"2021-11-09T14:25:29.824613Z","shell.execute_reply.started":"2021-11-09T14:25:29.811152Z","shell.execute_reply":"2021-11-09T14:25:29.823442Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"#merging the train dataset and train target scored dataset into one\ntrain_merge=pd.merge(train_features,train_targets_scored,on=\"sig_id\",how=\"left\")","metadata":{"execution":{"iopub.status.busy":"2021-11-09T14:25:32.822139Z","iopub.execute_input":"2021-11-09T14:25:32.822489Z","iopub.status.idle":"2021-11-09T14:25:32.954241Z","shell.execute_reply.started":"2021-11-09T14:25:32.822458Z","shell.execute_reply":"2021-11-09T14:25:32.953328Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"train_merge=train_merge[train_merge['cp_type']!='ctl_vehicle']\n#test_features1=test_features.copy()\ntest_features1=test_features[test_features['cp_type']!='ctl_vehicle']","metadata":{"execution":{"iopub.status.busy":"2021-11-09T14:25:33.957761Z","iopub.execute_input":"2021-11-09T14:25:33.958083Z","iopub.status.idle":"2021-11-09T14:25:34.129552Z","shell.execute_reply.started":"2021-11-09T14:25:33.958033Z","shell.execute_reply":"2021-11-09T14:25:34.128321Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"train_merge.drop(columns=['cp_type'],inplace=True)\ntest_features1.drop(columns=['cp_type'],inplace=True)","metadata":{"execution":{"iopub.status.busy":"2021-11-09T14:25:35.389305Z","iopub.execute_input":"2021-11-09T14:25:35.389623Z","iopub.status.idle":"2021-11-09T14:25:35.503496Z","shell.execute_reply.started":"2021-11-09T14:25:35.389593Z","shell.execute_reply":"2021-11-09T14:25:35.502778Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"lb=LabelEncoder()\nlb.fit(train_merge['cp_time'])\n\ntrain_merge['cp_time']=lb.transform(train_merge['cp_time'])\ntest_features1['cp_time']=lb.transform(test_features1['cp_time'])\n##################################################################################\nlb1=LabelEncoder()\nlb1.fit(train_merge['cp_dose'])\n\ntrain_merge['cp_dose']=lb1.transform(train_merge['cp_dose'])\ntest_features1['cp_dose']=lb1.transform(test_features1['cp_dose'])","metadata":{"execution":{"iopub.status.busy":"2021-11-09T14:25:36.565271Z","iopub.execute_input":"2021-11-09T14:25:36.565959Z","iopub.status.idle":"2021-11-09T14:25:36.587632Z","shell.execute_reply.started":"2021-11-09T14:25:36.565911Z","shell.execute_reply":"2021-11-09T14:25:36.586495Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"feature_groups=gene_features+cell_features+['cp_time','cp_dose']","metadata":{"execution":{"iopub.status.busy":"2021-11-09T14:25:38.593527Z","iopub.execute_input":"2021-11-09T14:25:38.593882Z","iopub.status.idle":"2021-11-09T14:25:38.599008Z","shell.execute_reply.started":"2021-11-09T14:25:38.593835Z","shell.execute_reply":"2021-11-09T14:25:38.598126Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"train_dataset=train_merge[feature_groups]","metadata":{"execution":{"iopub.status.busy":"2021-11-09T14:25:44.637913Z","iopub.execute_input":"2021-11-09T14:25:44.638288Z","iopub.status.idle":"2021-11-09T14:25:44.718110Z","shell.execute_reply.started":"2021-11-09T14:25:44.638249Z","shell.execute_reply":"2021-11-09T14:25:44.717118Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"test_dataset=test_features1[feature_groups]","metadata":{"execution":{"iopub.status.busy":"2021-11-09T14:25:45.712921Z","iopub.execute_input":"2021-11-09T14:25:45.713971Z","iopub.status.idle":"2021-11-09T14:25:45.732138Z","shell.execute_reply.started":"2021-11-09T14:25:45.713898Z","shell.execute_reply":"2021-11-09T14:25:45.731192Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"feature_value=train_dataset.iloc[15]\nY=train_merge[target_cols_scored].iloc[15]","metadata":{"execution":{"iopub.status.busy":"2021-11-09T14:25:47.281186Z","iopub.execute_input":"2021-11-09T14:25:47.281514Z","iopub.status.idle":"2021-11-09T14:25:47.308216Z","shell.execute_reply.started":"2021-11-09T14:25:47.281478Z","shell.execute_reply":"2021-11-09T14:25:47.307249Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"val=pd.DataFrame(feature_value).reset_index(drop=True)\n","metadata":{"execution":{"iopub.status.busy":"2021-11-09T14:25:48.953685Z","iopub.execute_input":"2021-11-09T14:25:48.954165Z","iopub.status.idle":"2021-11-09T14:25:48.958939Z","shell.execute_reply.started":"2021-11-09T14:25:48.954131Z","shell.execute_reply":"2021-11-09T14:25:48.958342Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"def function1(feature_value):\n    nfolds=10\n    SEEDS=[660]\n    predicted_value=np.zeros(())\n    y_pred_model1_seed_level=np.zeros((1,206))\n    y_pred_model2_seed_level=np.zeros((1,206))\n    y_pred_model3_seed_level=np.zeros((1,206))\n    y_pred_model4_seed_level=np.zeros((1,206))\n    for seed in SEEDS:\n        seed_everything(seed)\n        y_pred_model1_fold_level=np.zeros((1,206))\n        y_pred_model2_fold_level=np.zeros((1,206))\n        y_pred_model3_fold_level=np.zeros((1,206))\n        y_pred_model4_fold_level=np.zeros((1,206))\n        for fold in range(nfolds):\n            feature_value1=feature_value.copy()\n            feature_value2=feature_value.copy()\n            pca_gene1_3_4=pickle.load(open(f'../input/inference-version24/pickle_folder_gene/pca_gene_model1_3_4_seed{seed}_fold{fold}.pkl','rb'))\n            pca_cell1_3_4=pickle.load(open(f'../input/inference-version24/pickle_folder_cell/pca_cell_model1_3_4_seed{seed}_fold{fold}.pkl','rb'))\n            qt1_3_4=pickle.load(open(f'../input/inference-version24/pickle_folder_qt/qt_model_1_3_4_seed{seed}_fold{fold}.pkl','rb'))\n            \n            pca_gene_2=pickle.load(open(f'../input/inference-version24/pickle_folder_gene/pca_gene_model2_seed{seed}_fold{fold}.pkl','rb'))\n            pca_cell_2=pickle.load(open(f'../input/inference-version24/pickle_folder_cell/pca_cell_model2_seed{seed}_fold{fold}.pkl','rb'))\n            qt_2=pickle.load(open(f'../input/inference-version24/pickle_folder_qt/qt_model2_seed{seed}_fold{fold}.pkl','rb'))\n            \n            pca_gene_features=pca_gene1_3_4.transform(feature_value2[gene_features].values.reshape(1,-1))\n            pca_cell_features=pca_cell1_3_4.transform(feature_value2[cell_features].values.reshape(1,-1))\n     \n            feature_value2=pd.concat([pd.DataFrame(feature_value2.values.reshape(1,-1)),pd.DataFrame(pca_gene_features),pd.DataFrame(pca_cell_features)],axis=1)\n            \n            feature_value2=qt1_3_4.transform(feature_value2)\n            \n            \n            \n            #MODEL-1------------------------------------------------------------------------------------------------------------------------------\n            model1=load_model(f'../input/model-1-simple-nn-for-ensembling-ver1/model1_simple_nn_blending_seed{seed}_fold{fold}.h5')  \n            y_pred1=model1.predict(feature_value2)\n            ########################################################################################################################################\n            y_pred_model1_fold_level=y_pred_model1_seed_level+y_pred1\n            \n       \n        y_pred_model1_seed_level=y_pred_model1_seed_level+y_pred_model1_fold_level\n        \n        y_pred_model1_seed_level=y_pred_model1_seed_level/(nfolds*len(SEEDS))\n  \n    y_pred_final=y_pred_model1_seed_level\n    return y_pred_final","metadata":{"execution":{"iopub.status.busy":"2021-11-09T14:25:50.539134Z","iopub.execute_input":"2021-11-09T14:25:50.539495Z","iopub.status.idle":"2021-11-09T14:25:50.555441Z","shell.execute_reply.started":"2021-11-09T14:25:50.539461Z","shell.execute_reply":"2021-11-09T14:25:50.554727Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"!pip install streamlit","metadata":{"execution":{"iopub.status.busy":"2021-11-09T14:25:53.890398Z","iopub.execute_input":"2021-11-09T14:25:53.890863Z","iopub.status.idle":"2021-11-09T14:26:03.083454Z","shell.execute_reply.started":"2021-11-09T14:25:53.890829Z","shell.execute_reply":"2021-11-09T14:26:03.082643Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"import streamlit as st\ndef main():\n    st.title(\"Mechanism of Action Prediction\")\n    html_temp = \"\"\"\n    <div style=\"background-color:tomato;padding:10px\">\n    <h2 style=\"color:white;text-align:center;\">Mechanism of Action Prediction </h2>\n    </div>\n    \"\"\"\n    st.markdown(html_temp,unsafe_allow_html=True)\n    #sentence = st.text_input(\"INPUT\",\"Enter the features\")\n    #feature_variable=\n    #sen=st.multiselect(options=feature_value)\n    result=np.zeros((1,206))\n    if st.button(\"REPLY\"):\n        result=function1(feature_value)\n    st.success('BOT-> {}'.format(result))\n\n\nif __name__=='__main__':\n    main()","metadata":{"execution":{"iopub.status.busy":"2021-11-09T14:26:48.093732Z","iopub.execute_input":"2021-11-09T14:26:48.094123Z","iopub.status.idle":"2021-11-09T14:26:48.105051Z","shell.execute_reply.started":"2021-11-09T14:26:48.094052Z","shell.execute_reply":"2021-11-09T14:26:48.103894Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}